 We'll include user authentication, file storage with AWS S3, and a more sophisticated UI using Next.js and Redux.

### 1. **Backend Setup**

#### a) **Setting Up Express Server with User Authentication and AWS S3**

First, create a new project and set up the necessary dependencies.

```bash
mkdir cheerz
cd cheerz
npm init -y
npm install express mongoose body-parser bcryptjs jsonwebtoken aws-sdk multer dotenv
```

Create a `.env` file to store environment variables.

```env
PORT=3000
MONGODB_URI=mongodb://localhost:27017/reviews
JWT_SECRET=your_jwt_secret
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
S3_BUCKET_NAME=your_s3_bucket_name
```

**Server Setup (`server.js`):**

```javascript
const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const AWS = require('aws-sdk');
const multer = require('multer');
const path = require('path');
const cors = require('cors');
require('dotenv').config();

const app = express();
app.use(bodyParser.json());
app.use(cors());

mongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true });

const userSchema = new mongoose.Schema({
    username: String,
    password: String
});

const reviewSchema = new mongoose.Schema({
    productId: String,
    userName: String,
    rating: Number,
    reviewText: String,
    photo: String,
    video: String,
    createdAt: { type: Date, default: Date.now }
});

const User = mongoose.model('User', userSchema);
const Review = mongoose.model('Review', reviewSchema);

// AWS S3 setup
const s3 = new AWS.S3({
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
});

// Multer setup for file uploads
const storage = multer.memoryStorage();
const upload = multer({ storage });

// User registration
app.post('/api/register', async (req, res) => {
    const { username, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ username, password: hashedPassword });
    await user.save();
    res.status(201).send('User registered');
});

// User login
app.post('/api/login', async (req, res) => {
    const { username, password } = req.body;
    const user = await User.findOne({ username });
    if (!user || !(await bcrypt.compare(password, user.password))) {
        return res.status(400).send('Invalid credentials');
    }
    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
    res.send({ token });
});

// Middleware to authenticate JWT tokens
const authenticate = (req, res, next) => {
    const token = req.header('Authorization').replace('Bearer ', '');
    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        req.user = decoded;
        next();
    } catch (error) {
        res.status(401).send('Invalid token');
    }
};

// API Endpoint to submit a review
app.post('/api/reviews', authenticate, upload.fields([{ name: 'photo' }, { name: 'video' }]), async (req, res) => {
    const { productId, userName, rating, reviewText } = req.body;
    const review = new Review({ productId, userName, rating, reviewText });

    if (req.files.photo) {
        const photoParams = {
            Bucket: process.env.S3_BUCKET_NAME,
            Key: `photos/${Date.now()}_${path.basename(req.files.photo[0].originalname)}`,
            Body: req.files.photo[0].buffer
        };
        const photoData = await s3.upload(photoParams).promise();
        review.photo = photoData.Location;
    }

    if (req.files.video) {
        const videoParams = {
            Bucket: process.env.S3_BUCKET_NAME,
            Key: `videos/${Date.now()}_${path.basename(req.files.video[0].originalname)}`,
            Body: req.files.video[0].buffer
        };
        const videoData = await s3.upload(videoParams).promise();
        review.video = videoData.Location;
    }

    await review.save();
    res.status(201).send(review);
});

// API Endpoint to get reviews for a product
app.get('/api/reviews/:productId', async (req, res) => {
    const reviews = await Review.find({ productId: req.params.productId });
    res.send(reviews);
});

app.listen(process.env.PORT, () => {
    console.log(`Server is running on port ${process.env.PORT}`);
});
```

### 2. **Frontend Setup with Next.js and Redux**

First, create a new Next.js project:

```bash
npx create-next-app@latest cheerz-frontend
cd cheerz-frontend
npm install axios redux react-redux redux-thunk
```

#### b) **Setting Up Redux**

**Create a Redux store (`store.js`):**

```javascript
import { createStore, applyMiddleware, combineReducers } from 'redux';
import thunk from 'redux-thunk';
import { composeWithDevTools } from 'redux-devtools-extension';
import authReducer from './reducers/authReducer';
import reviewReducer from './reducers/reviewReducer';

const rootReducer = combineReducers({
    auth: authReducer,
    reviews: reviewReducer
});

const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));

export default store;
```

**Create Auth Reducer (`reducers/authReducer.js`):**

```javascript
const initialState = {
    token: null,
    user: null,
    loading: false,
    error: null
};

const authReducer = (state = initialState, action) => {
    switch (action.type) {
        case 'AUTH_START':
            return { ...state, loading: true };
        case 'AUTH_SUCCESS':
            return { ...state, token: action.token, user: action.user, loading: false };
        case 'AUTH_FAIL':
            return { ...state, error: action.error, loading: false };
        case 'AUTH_LOGOUT':
            return { ...state, token: null, user: null };
        default:
            return state;
    }
};

export default authReducer;
```

**Create Review Reducer (`reducers/reviewReducer.js`):**

```javascript
const initialState = {
    reviews: [],
    loading: false,
    error: null
};

const reviewReducer = (state = initialState, action) => {
    switch (action.type) {
        case 'FETCH_REVIEWS_START':
            return { ...state, loading: true };
        case 'FETCH_REVIEWS_SUCCESS':
            return { ...state, reviews: action.reviews, loading: false };
        case 'FETCH_REVIEWS_FAIL':
            return { ...state, error: action.error, loading: false };
        default:
            return state;
    }
};

export default reviewReducer;
```

**Create Auth Actions (`actions/authActions.js`):**

```javascript
import axios from 'axios';

export const authStart = () => {
    return { type: 'AUTH_START' };
};

export const authSuccess = (token, user) => {
    return { type: 'AUTH_SUCCESS', token, user };
};

export const authFail = (error) => {
    return { type: 'AUTH_FAIL', error };
};

export const logout = () => {
    return { type: 'AUTH_LOGOUT' };
};

export const login = (username, password) => {
    return async dispatch => {
        dispatch(authStart());
        try {
            const response = await axios.post('http://localhost:3000/api/login', { username, password });
            const { token } = response.data;
            dispatch(authSuccess(token, username));
        } catch (error) {
            dispatch(authFail(error.response.data));
        }
    };
};

export const register = (username, password) => {
    return async dispatch => {
        dispatch(authStart());
        try {
            await axios.post('http://localhost:3000/api/register', { username, password });
            dispatch(login(username, password));
        } catch (error) {
            dispatch(authFail(error.response.data));
        }
    };
};
```

**Create Review Actions (`actions/reviewActions.js`):**

```javascript
import axios from 'axios';

export const fetchReviewsStart = () => {
    return { type: 'FETCH_REVIEWS_START' };
};

export const fetchReviewsSuccess = (reviews) => {
    return { type: 'FETCH_REVIEWS_SUCCESS', reviews };
};

export const fetchReviewsFail = (error) => {
    return { type: 'FETCH_REVIEWS_FAIL', error };
};

export const fetchReviews = (productId) => {
    return async dispatch => {
        dispatch(fetchReviewsStart());
        try {
            const response = await axios.get(`http://localhost:3000/api/reviews/${productId}`);
            dispatch(fetchReviewsSuccess(response.data));
        } catch (error) {
            dispatch(fetchReviewsFail(error.response.data));
        }
    };
};

export const submitReview = (reviewData, token) => {
    return async dispatch => {
        try {
            const config = {
                headers: { Authorization: `Bearer ${token}`, 'Content-Type': 'multipart/form-data' }
            };
            await axios.post('http://localhost:3000/api/reviews', reviewData, config);
            dispatch(fetch

Reviews(reviewData.get('productId')));
        } catch (error) {
            console.error('Error submitting review:', error);
        }
    };
};
```

#### c) **Creating React Components with Next.js**

**ReviewForm Component (`components/ReviewForm.js`):**

```javascript
import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { submitReview } from '../actions/reviewActions';

const ReviewForm = ({ productId }) => {
    const [userName, setUserName] = useState('');
    const [rating, setRating] = useState(5);
    const [reviewText, setReviewText] = useState('');
    const [photo, setPhoto] = useState(null);
    const [video, setVideo] = useState(null);

    const dispatch = useDispatch();
    const token = useSelector(state => state.auth.token);

    const handleSubmit = (event) => {
        event.preventDefault();
        const formData = new FormData();
        formData.append('productId', productId);
        formData.append('userName', userName);
        formData.append('rating', rating);
        formData.append('reviewText', reviewText);
        if (photo) formData.append('photo', photo);
        if (video) formData.append('video', video);

        dispatch(submitReview(formData, token));
    };

    return (
        <form onSubmit={handleSubmit}>
            <div>
                <label>User Name:</label>
                <input type="text" value={userName} onChange={(e) => setUserName(e.target.value)} required />
            </div>
            <div>
                <label>Rating:</label>
                <select value={rating} onChange={(e) => setRating(e.target.value)}>
                    <option value={5}>5 Stars</option>
                    <option value={4}>4 Stars</option>
                    <option value={3}>3 Stars</option>
                    <option value={2}>2 Stars</option>
                    <option value={1}>1 Star</option>
                </select>
            </div>
            <div>
                <label>Review:</label>
                <textarea value={reviewText} onChange={(e) => setReviewText(e.target.value)} required></textarea>
            </div>
            <div>
                <label>Photo:</label>
                <input type="file" onChange={(e) => setPhoto(e.target.files[0])} />
            </div>
            <div>
                <label>Video:</label>
                <input type="file" onChange={(e) => setVideo(e.target.files[0])} />
            </div>
            <button type="submit">Submit Review</button>
        </form>
    );
};

export default ReviewForm;
```

**ReviewList Component (`components/ReviewList.js`):**

```javascript
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchReviews } from '../actions/reviewActions';

const ReviewList = ({ productId }) => {
    const dispatch = useDispatch();
    const reviews = useSelector(state => state.reviews.reviews);
    const loading = useSelector(state => state.reviews.loading);

    useEffect(() => {
        dispatch(fetchReviews(productId));
    }, [dispatch, productId]);

    if (loading) {
        return <p>Loading...</p>;
    }

    return (
        <div>
            <h3>Customer Reviews</h3>
            {reviews.map((review) => (
                <div key={review._id}>
                    <h4>{review.userName}</h4>
                    <p>Rating: {review.rating} stars</p>
                    <p>{review.reviewText}</p>
                    {review.photo && <img src={review.photo} alt="Review" />}
                    {review.video && <video src={review.video} controls />}
                </div>
            ))}
        </div>
    );
};

export default ReviewList;
```

**Auth Component (`components/Auth.js`):**

```javascript
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { login, register } from '../actions/authActions';

const Auth = () => {
    const [isLogin, setIsLogin] = useState(true);
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const dispatch = useDispatch();

    const handleSubmit = (event) => {
        event.preventDefault();
        if (isLogin) {
            dispatch(login(username, password));
        } else {
            dispatch(register(username, password));
        }
    };

    return (
        <div>
            <form onSubmit={handleSubmit}>
                <h2>{isLogin ? 'Login' : 'Register'}</h2>
                <div>
                    <label>Username:</label>
                    <input type="text" value={username} onChange={(e) => setUsername(e.target.value)} required />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} required />
                </div>
                <button type="submit">{isLogin ? 'Login' : 'Register'}</button>
            </form>
            <button onClick={() => setIsLogin(!isLogin)}>
                {isLogin ? 'Switch to Register' : 'Switch to Login'}
            </button>
        </div>
    );
};

export default Auth;
```

#### d) **Integrating Components into Next.js Pages**

**Home Page (`pages/index.js`):**

```javascript
import React from 'react';
import { Provider } from 'react-redux';
import store from '../store';
import Auth from '../components/Auth';
import ReviewForm from '../components/ReviewForm';
import ReviewList from '../components/ReviewList';

const Home = () => {
    const productId = 'example_product_id';  // Replace with dynamic product ID

    return (
        <Provider store={store}>
            <div>
                <Auth />
                <ReviewForm productId={productId} />
                <ReviewList productId={productId} />
            </div>
        </Provider>
    );
};

export default Home;
```

This setup provides a more complete implementation of an app similar to Loox, including user authentication, file storage on AWS S3, and a robust frontend using Next.js and Redux. Make sure to configure and secure your environment variables properly and to handle any additional error handling and edge cases as needed.
